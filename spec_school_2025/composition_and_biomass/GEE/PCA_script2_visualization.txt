//Script 2 "Principal Component Analysis of AOP Hyperspectral Data in GEE" https://www.neonscience.org/resources/learning-hub/tutorials/aop-gee-refl-pca 


// Load the original hyperspectral image, selecting bands for RGB visualization
// B053 (~660nm, red), B035 (~550nm, green), B019 (~450nm, blue)
var reflLIRO_2022view = ee.ImageCollection("projects/neon-prod-earthengine/assets/HSI_REFL/002")
    .filterMetadata('NEON_SITE', 'equals', 'MLBS')  // Select MLBS experimental forest site
    .filterDate("2023-01-01", "2023-12-31")         // Select 2023 data
    .first()                                        // Get first (and likely only) image
    .select(['B053', 'B035', 'B019']);              // Select bands for natural color display

// Load the pre-computed PCA results from Earth Engine Assets
// This asset was created by Script 1 and contains the first 5 principal components
var pcaAsset = ee.Image('projects/ee-geshirkey/assets/PCA_MLBS_2023');

print("PCA image - top 5 PCA bands", pcaAsset)

// Center the map on our study area
// Zoom level 12 provides a good overview of the LIRO site
Map.centerObject(reflLIRO_2022view, 13);

// Add layers to the map
// Start with the original RGB image as the base layer
Map.addLayer(reflLIRO_2022view, 
    {min: 103, max: 1160},                          // Set visualization parameters
    'Original RGB');                                 // Layer name in the Layer Manager

// Pull in the palettes package and create a spectral color palette for visualization
var palettes = require('users/gena/packages:palettes');
var pc1_palette = palettes.colorbrewer.Spectral[9]

// Add the first and second principal components as layers
// PC1 typically contains the most variance/information from the original bands
Map.addLayer(pcaAsset,
    {bands: ['PC1'],                                // Display the first component
     min: -7000, max: 40000,                        // Set stretch values for good contrast
    palette: pc1_palette,},                         // Add a the pc1_palette
    'PC1');                                         // Layer name

Map.addLayer(pcaAsset,
    {bands: ['PC2'],                                // Display the second component
     min: -7000, max: 40000,                        // Set stretch values for good contrast
    palette: pc1_palette,},                         // Add a the pc1_palette
    'PC2');                                         // Layer name

Map.addLayer(pcaAsset,
    {bands: ['PC3'],                                // Display the second component
     min: -7000, max: 40000,                        // Set stretch values for good contrast
    palette: pc1_palette,},                         // Add a the pc1_palette
    'PC3');                                         // Layer name

Map.addLayer(pcaAsset,
    {bands: ['PC4'],                                // Display the second component
     min: -7000, max: 40000,                        // Set stretch values for good contrast
    palette: pc1_palette,},                         // Add a the pc1_palette
    'PC4');                                         // Layer name

Map.addLayer(pcaAsset,
    {bands: ['PC5'],                                // Display the second component
     min: -7000, max: 40000,                        // Set stretch values for good contrast
    palette: pc1_palette,},                         // Add a the pc1_palette
    'PC5');                                         // Layer name

// Note: You can toggle layer visibility and adjust transparency
// using the Layer Manager panel in the upper right of the map

// Create training dataset from PCA results
var training = pcaAsset.sample({
    region: pcaAsset.geometry(),
    scale: 10,
    numPixels: 5000,
    seed: 123
});

// Function to perform clustering with different numbers of clusters
function performClustering(numClusters) {
    // Train the clusterer
    var clusterer = ee.Clusterer.wekaKMeans({
        nClusters: numClusters,
        seed: 123
    }).train(training);
    
    // Cluster the PCA image
    var clustered = pcaAsset.cluster(clusterer);
    
    // Add clustered image to map
    Map.addLayer(clustered.randomVisualizer(), {}, 
        'Clusters (k=' + numClusters + ')');
    
    return clustered;
}

// Try different numbers of clusters
var clusters5 = performClustering(5);
var clusters7 = performClustering(7);
var clusters10 = performClustering(10);

// Optional: Calculate and export cluster statistics
var calculateClusterStats = function(clusteredImage, numClusters) {
    // Calculate area per cluster
    var areaImage = ee.Image.pixelArea().addBands(clusteredImage);
    var areas = areaImage.reduceRegion({
        reducer: ee.Reducer.sum().group({
            groupField: 1,
            groupName: 'cluster',
        }),
        geometry: pcaAsset.geometry(),
        scale: 10,
        maxPixels: 1e13
    });
    
    print('Cluster areas (mÂ²) for k=' + numClusters, areas);
};

calculateClusterStats(clusters5, 5);
calculateClusterStats(clusters7, 7);
calculateClusterStats(clusters10, 10);

// Uncomment to export clustered results to your Google Drive, if desired
Export.image.toDrive({
     image: clusters5,
     description: 'MLBS_PCA_Clusters_k5',
     scale: 5,
     maxPixels: 1e13
 });